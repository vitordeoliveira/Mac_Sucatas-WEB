{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nconst ADDPRODUCT = gql`\n  mutation AddProduct($name: String!, $stock: Int, $balanceStock: Float) {\n    addProduct(name: $name, stock: $stock, balanceStock: $balanceStock) {\n      id\n      name\n      stock\n    }\n  }\n`;\nconst GETPRODUCTS = gql`\n  {\n    getProduct {\n      id\n      name\n      stock\n      balanceStock\n    }\n  }\n`;\nconst DELETEPRODUCT = gql`\n  mutation deleteProduct($id: ID!) {\n    deleteProduct(id: $id) {\n      success\n      error\n    }\n  }\n`;\n\nfunction useProducts() {\n  _s();\n\n  const [add] = useMutation(ADDPRODUCT);\n  const [remove] = useMutation(DELETEPRODUCT);\n  const {\n    loading,\n    data,\n    refetch\n  } = useQuery(GETPRODUCTS);\n\n  const onAdd = async (name, stock, balanceStock) => {\n    try {\n      await add({\n        variables: {\n          name,\n          stock: Number(stock),\n          balanceStock: Number(balanceStock.replace(\",\", \".\"))\n        }\n      });\n      refetch({\n        reload: true\n      });\n    } catch ({\n      graphQLErrors\n    }) {\n      alert(graphQLErrors[0].message);\n    }\n  };\n\n  const onRemove = async id => {\n    try {\n      const {\n        data\n      } = await remove({\n        variables: {\n          id\n        }\n      });\n      const {\n        success,\n        error\n      } = data.deleteProduct;\n\n      if (!success) {\n        alert(error);\n      }\n\n      refetch({\n        reload: true\n      });\n    } catch ({\n      graphQLErrors\n    }) {\n      alert(graphQLErrors[0].message);\n    }\n  };\n\n  return [{\n    loading,\n    data\n  }, refetch, onAdd, onRemove];\n}\n\n_s(useProducts, \"2j2XP8e6x9PpYTeJE2lnrZ19NcE=\", false, function () {\n  return [useMutation, useMutation, useQuery];\n});\n\nexport default useProducts;","map":{"version":3,"sources":["/home/vitor/Desktop/Work/MAC Sucatas GraphQl/web/src/hooks/useProducts.js"],"names":["useMutation","useQuery","gql","ADDPRODUCT","GETPRODUCTS","DELETEPRODUCT","useProducts","add","remove","loading","data","refetch","onAdd","name","stock","balanceStock","variables","Number","replace","reload","graphQLErrors","alert","message","onRemove","id","success","error","deleteProduct"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,UAAU,GAAGD,GAAI;;;;;;;;CAAvB;AAUA,MAAME,WAAW,GAAGF,GAAI;;;;;;;;;CAAxB;AAWA,MAAMG,aAAa,GAAGH,GAAI;;;;;;;CAA1B;;AASA,SAASI,WAAT,GAAuB;AAAA;;AACrB,QAAM,CAACC,GAAD,IAAQP,WAAW,CAACG,UAAD,CAAzB;AACA,QAAM,CAACK,MAAD,IAAWR,WAAW,CAACK,aAAD,CAA5B;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA6BV,QAAQ,CAACG,WAAD,CAA3C;;AAEA,QAAMQ,KAAK,GAAG,OAAOC,IAAP,EAAaC,KAAb,EAAoBC,YAApB,KAAqC;AACjD,QAAI;AACF,YAAMR,GAAG,CAAC;AACRS,QAAAA,SAAS,EAAE;AACTH,UAAAA,IADS;AAETC,UAAAA,KAAK,EAAEG,MAAM,CAACH,KAAD,CAFJ;AAGTC,UAAAA,YAAY,EAAEE,MAAM,CAACF,YAAY,CAACG,OAAb,CAAqB,GAArB,EAA0B,GAA1B,CAAD;AAHX;AADH,OAAD,CAAT;AAOAP,MAAAA,OAAO,CAAC;AAAEQ,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAP;AACD,KATD,CASE,OAAO;AAAEC,MAAAA;AAAF,KAAP,EAA0B;AAC1BC,MAAAA,KAAK,CAACD,aAAa,CAAC,CAAD,CAAb,CAAiBE,OAAlB,CAAL;AACD;AACF,GAbD;;AAeA,QAAMC,QAAQ,GAAG,MAAOC,EAAP,IAAc;AAC7B,QAAI;AACF,YAAM;AAAEd,QAAAA;AAAF,UAAW,MAAMF,MAAM,CAAC;AAC5BQ,QAAAA,SAAS,EAAE;AAAEQ,UAAAA;AAAF;AADiB,OAAD,CAA7B;AAGA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAqBhB,IAAI,CAACiB,aAAhC;;AAEA,UAAI,CAACF,OAAL,EAAc;AACZJ,QAAAA,KAAK,CAACK,KAAD,CAAL;AACD;;AACDf,MAAAA,OAAO,CAAC;AAAEQ,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAP;AACD,KAVD,CAUE,OAAO;AAAEC,MAAAA;AAAF,KAAP,EAA0B;AAC1BC,MAAAA,KAAK,CAACD,aAAa,CAAC,CAAD,CAAb,CAAiBE,OAAlB,CAAL;AACD;AACF,GAdD;;AAgBA,SAAO,CAAC;AAAEb,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCW,QAApC,CAAP;AACD;;GArCQjB,W;UACON,W,EACGA,W,EACkBC,Q;;;AAoCrC,eAAeK,WAAf","sourcesContent":["import { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst ADDPRODUCT = gql`\n  mutation AddProduct($name: String!, $stock: Int, $balanceStock: Float) {\n    addProduct(name: $name, stock: $stock, balanceStock: $balanceStock) {\n      id\n      name\n      stock\n    }\n  }\n`;\n\nconst GETPRODUCTS = gql`\n  {\n    getProduct {\n      id\n      name\n      stock\n      balanceStock\n    }\n  }\n`;\n\nconst DELETEPRODUCT = gql`\n  mutation deleteProduct($id: ID!) {\n    deleteProduct(id: $id) {\n      success\n      error\n    }\n  }\n`;\n\nfunction useProducts() {\n  const [add] = useMutation(ADDPRODUCT);\n  const [remove] = useMutation(DELETEPRODUCT);\n  const { loading, data, refetch } = useQuery(GETPRODUCTS);\n\n  const onAdd = async (name, stock, balanceStock) => {\n    try {\n      await add({\n        variables: {\n          name,\n          stock: Number(stock),\n          balanceStock: Number(balanceStock.replace(\",\", \".\")),\n        },\n      });\n      refetch({ reload: true });\n    } catch ({ graphQLErrors }) {\n      alert(graphQLErrors[0].message);\n    }\n  };\n\n  const onRemove = async (id) => {\n    try {\n      const { data } = await remove({\n        variables: { id },\n      });\n      const { success, error } = data.deleteProduct;\n\n      if (!success) {\n        alert(error);\n      }\n      refetch({ reload: true });\n    } catch ({ graphQLErrors }) {\n      alert(graphQLErrors[0].message);\n    }\n  };\n\n  return [{ loading, data }, refetch, onAdd, onRemove];\n}\n\nexport default useProducts;\n"]},"metadata":{},"sourceType":"module"}