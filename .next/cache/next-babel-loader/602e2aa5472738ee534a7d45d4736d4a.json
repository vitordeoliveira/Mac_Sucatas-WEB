{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useReducer, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nconst GETPRODUCT = gql`\n  query getProduct($id: ID) {\n    getProduct(filterById: $id) {\n      id\n      name\n      stock\n      balanceStock\n    }\n  }\n`;\nconst UPDATEPRODUCT = gql`\n  mutation updateProduct(\n    $id: ID!\n    $name: String\n    $stock: Int\n    $balanceStock: Float\n  ) {\n    updateProduct(\n      id: $id\n      name: $name\n      stock: $stock\n      balanceStock: $balanceStock\n    )\n  }\n`;\n\nfunction reducer(state, payload) {\n  switch (payload.type) {\n    case \"load\":\n      if (payload.data.getProduct.length !== 0) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          id: payload.data.getProduct[0].id,\n          name: payload.data.getProduct[0].name,\n          stock: payload.data.getProduct[0].stock,\n          balanceStock: payload.data.getProduct[0].balanceStock\n        });\n      }\n\n      return state;\n\n    case \"onUpdate\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        id: payload.id,\n        showUpdate: true\n      });\n\n    case \"offUpdate\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showUpdate: false\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction useUpdateProduct() {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, {\n    id: 0,\n    name: \"\",\n    stock: \"\",\n    balanceStock: \"\",\n    showUpdate: false\n  });\n  const [update] = useMutation(UPDATEPRODUCT);\n  const {\n    loading,\n    data\n  } = useQuery(GETPRODUCT, {\n    variables: {\n      id: state.id\n    }\n  });\n  useEffect(() => {\n    if (!loading) {\n      dispatch({\n        type: \"load\",\n        data\n      });\n    }\n  }, [loading, data]);\n  return [dispatch, state, update];\n}\n\nexport default useUpdateProduct;","map":{"version":3,"sources":["/home/vitor/Desktop/Work/MAC Sucatas GraphQl/web/pages/hooks/useUpdateProduct.js"],"names":["useReducer","useEffect","useMutation","useQuery","gql","GETPRODUCT","UPDATEPRODUCT","reducer","state","payload","type","data","getProduct","length","id","name","stock","balanceStock","showUpdate","useUpdateProduct","dispatch","update","loading","variables"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,UAAU,GAAGD,GAAI;;;;;;;;;CAAvB;AAWA,MAAME,aAAa,GAAGF,GAAI;;;;;;;;;;;;;;CAA1B;;AAgBA,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC/B,UAAQA,OAAO,CAACC,IAAhB;AACE,SAAK,MAAL;AACE,UAAID,OAAO,CAACE,IAAR,CAAaC,UAAb,CAAwBC,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,+CACKL,KADL;AAEEM,UAAAA,EAAE,EAAEL,OAAO,CAACE,IAAR,CAAaC,UAAb,CAAwB,CAAxB,EAA2BE,EAFjC;AAGEC,UAAAA,IAAI,EAAEN,OAAO,CAACE,IAAR,CAAaC,UAAb,CAAwB,CAAxB,EAA2BG,IAHnC;AAIEC,UAAAA,KAAK,EAAEP,OAAO,CAACE,IAAR,CAAaC,UAAb,CAAwB,CAAxB,EAA2BI,KAJpC;AAKEC,UAAAA,YAAY,EAAER,OAAO,CAACE,IAAR,CAAaC,UAAb,CAAwB,CAAxB,EAA2BK;AAL3C;AAOD;;AACD,aAAOT,KAAP;;AAEF,SAAK,UAAL;AACE,6CACKA,KADL;AAEEM,QAAAA,EAAE,EAAEL,OAAO,CAACK,EAFd;AAGEI,QAAAA,UAAU,EAAE;AAHd;;AAKF,SAAK,WAAL;AACE,6CACKV,KADL;AAEEU,QAAAA,UAAU,EAAE;AAFd;;AAKF;AACE,aAAOV,KAAP;AA1BJ;AA4BD;;AAED,SAASW,gBAAT,GAA4B;AAC1B,QAAM;AAAA,OAACX,KAAD;AAAA,OAAQY;AAAR,MAAoBpB,UAAU,CAACO,OAAD,EAAU;AAC5CO,IAAAA,EAAE,EAAE,CADwC;AAE5CC,IAAAA,IAAI,EAAE,EAFsC;AAG5CC,IAAAA,KAAK,EAAE,EAHqC;AAI5CC,IAAAA,YAAY,EAAE,EAJ8B;AAK5CC,IAAAA,UAAU,EAAE;AALgC,GAAV,CAApC;AAOA,QAAM,CAACG,MAAD,IAAWnB,WAAW,CAACI,aAAD,CAA5B;AAEA,QAAM;AAAEgB,IAAAA,OAAF;AAAWX,IAAAA;AAAX,MAAoBR,QAAQ,CAACE,UAAD,EAAa;AAC7CkB,IAAAA,SAAS,EAAE;AAAET,MAAAA,EAAE,EAAEN,KAAK,CAACM;AAAZ;AADkC,GAAb,CAAlC;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACqB,OAAL,EAAc;AACZF,MAAAA,QAAQ,CAAC;AAAEV,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA;AAAhB,OAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACW,OAAD,EAAUX,IAAV,CAJM,CAAT;AAMA,SAAO,CAACS,QAAD,EAAWZ,KAAX,EAAkBa,MAAlB,CAAP;AACD;;AAED,eAAeF,gBAAf","sourcesContent":["import { useReducer, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst GETPRODUCT = gql`\n  query getProduct($id: ID) {\n    getProduct(filterById: $id) {\n      id\n      name\n      stock\n      balanceStock\n    }\n  }\n`;\n\nconst UPDATEPRODUCT = gql`\n  mutation updateProduct(\n    $id: ID!\n    $name: String\n    $stock: Int\n    $balanceStock: Float\n  ) {\n    updateProduct(\n      id: $id\n      name: $name\n      stock: $stock\n      balanceStock: $balanceStock\n    )\n  }\n`;\n\nfunction reducer(state, payload) {\n  switch (payload.type) {\n    case \"load\":\n      if (payload.data.getProduct.length !== 0) {\n        return {\n          ...state,\n          id: payload.data.getProduct[0].id,\n          name: payload.data.getProduct[0].name,\n          stock: payload.data.getProduct[0].stock,\n          balanceStock: payload.data.getProduct[0].balanceStock,\n        };\n      }\n      return state;\n\n    case \"onUpdate\":\n      return {\n        ...state,\n        id: payload.id,\n        showUpdate: true,\n      };\n    case \"offUpdate\":\n      return {\n        ...state,\n        showUpdate: false,\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction useUpdateProduct() {\n  const [state, dispatch] = useReducer(reducer, {\n    id: 0,\n    name: \"\",\n    stock: \"\",\n    balanceStock: \"\",\n    showUpdate: false,\n  });\n  const [update] = useMutation(UPDATEPRODUCT);\n\n  const { loading, data } = useQuery(GETPRODUCT, {\n    variables: { id: state.id },\n  });\n\n  useEffect(() => {\n    if (!loading) {\n      dispatch({ type: \"load\", data });\n    }\n  }, [loading, data]);\n\n  return [dispatch, state, update];\n}\n\nexport default useUpdateProduct;\n"]},"metadata":{},"sourceType":"module"}