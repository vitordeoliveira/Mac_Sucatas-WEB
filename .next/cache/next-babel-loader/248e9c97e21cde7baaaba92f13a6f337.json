{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Context from \".\";\nconst AUTH = gql`\n  {\n    auth {\n      id\n      name\n      role\n    }\n  }\n`;\nexport default function useLoadUser() {\n  const {\n    data,\n    loading\n  } = useQuery(AUTH);\n  const {\n    setAuth\n  } = useContext(Context);\n  useEffect(() => {\n    if (!loading && data && data.auth) {\n      setAuth(old => _objectSpread(_objectSpread({}, old), {}, {\n        isAuthenticated: true,\n        loading,\n        user: data.auth\n      }));\n    } else {\n      setAuth(old => _objectSpread(_objectSpread({}, old), {}, {\n        loading\n      }));\n    }\n  }, [data, loading, setAuth]);\n}","map":{"version":3,"sources":["/home/vitor/Desktop/Work/MAC Sucatas GraphQl/web/src/Authentication/useLoadUser.js"],"names":["useContext","useEffect","gql","useQuery","Context","AUTH","useLoadUser","data","loading","setAuth","auth","old","isAuthenticated","user"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,OAAtC;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,GAApB;AAEA,MAAMC,IAAI,GAAGH,GAAI;;;;;;;;CAAjB;AAUA,eAAe,SAASI,WAAT,GAAuB;AACpC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,QAAQ,CAACE,IAAD,CAAlC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAcT,UAAU,CAACI,OAAD,CAA9B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACO,OAAD,IAAYD,IAAZ,IAAoBA,IAAI,CAACG,IAA7B,EAAmC;AACjCD,MAAAA,OAAO,CAAEE,GAAD,oCACHA,GADG;AAENC,QAAAA,eAAe,EAAE,IAFX;AAGNJ,QAAAA,OAHM;AAINK,QAAAA,IAAI,EAAEN,IAAI,CAACG;AAJL,QAAD,CAAP;AAMD,KAPD,MAOO;AACLD,MAAAA,OAAO,CAAEE,GAAD,oCACHA,GADG;AAENH,QAAAA;AAFM,QAAD,CAAP;AAID;AACF,GAdQ,EAcN,CAACD,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,CAdM,CAAT;AAeD","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport Context from \".\";\n\nconst AUTH = gql`\n  {\n    auth {\n      id\n      name\n      role\n    }\n  }\n`;\n\nexport default function useLoadUser() {\n  const { data, loading } = useQuery(AUTH);\n  const { setAuth } = useContext(Context);\n\n  useEffect(() => {\n    if (!loading && data && data.auth) {\n      setAuth((old) => ({\n        ...old,\n        isAuthenticated: true,\n        loading,\n        user: data.auth,\n      }));\n    } else {\n      setAuth((old) => ({\n        ...old,\n        loading,\n      }));\n    }\n  }, [data, loading, setAuth]);\n}\n"]},"metadata":{},"sourceType":"module"}